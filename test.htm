<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="./jquery-3.7.1.min.js"></script>
	<title>プラレールレイアウトシミュレーション</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
		button{ height: 50px;
		}
    </style>
</head>
<body>
	<button onclick="scaleReset();draw();">reset</button>
    <button onclick="addRail('L');draw();">左曲線</button>
    <button onclick="addRail('S');draw();">直線</button>
    <button onclick="addRail('R');draw();">右曲線</button>
<br>  
    <canvas id="railCanvas" width="750" height="750"></canvas>
<br>
	<button onclick="scaleReset();draw();">reset</button>
     <button onclick="addRail('L');draw();">左曲線</button>
   <button onclick="addRail('S');draw();">直線</button>
    <button onclick="addRail('R');draw();">右曲線</button>

<br>  
	<button onclick="save()">保存</button>
    <button onclick="load()">読み込み</button>保存スロット
    <select id="dataSelect">
        <option value="ringo">りんご</option>
        <option value="mikan">みかん</option>
        <option value="budou">ぶどう</option>
        <option value="banana">バナナ</option>
        <option value="suika">すいか</option>
    </select>
    <p id="output"></p>



    <script>
        const canvas = document.getElementById('railCanvas');
        const ctx = canvas.getContext('2d');
        let rails = []; // レールの配列
		let joints = []; //ジョイント部の配列

	let CANVASWIDTH  = 750;
	let CANVASHEIGHT = 750;
//画面ドラッグ関連
	let isDraggingCanvas = false;
	let canvasOffsetX = CANVASWIDTH /2;
	let canvasOffsetY = CANVASHEIGHT/2;
	let drawScale = 1;
	let scale = 1;

//タッチ関連
	let preMouseX;
	let preMouseY;
	let prePinchDist;//タッチ時の最初のピンチ幅
	let preScale;//タッチ開始時の縮尺
	let touchcount = 0;

	let setTOdrawID = null;
//レールの寸法
	const BASE_LENGTH = 80;
	const BASE_WIDTH = 14;
	const JOINT_WIDTH = 4;
	const JOINT_LENGTH = 4;
	const lineWidthArray = [BASE_WIDTH, 12, 6, 4];
	const colorArray = ["#000000", "#51b5ff", "#1970c1", "#51b5ff"];

	var observ = null;

	let num_rail = 0;
	let dfx = 0;//マウスクリックと図形原点のずれ
	let dfy = 0;

	// 終点位置
	const INIT_X = 0;
	const INIT_Y = 0;
	let endX;
	let endY;
	
	// 終点の角度
	let endAngleDeg; // -Y軸０　時計回り

    let selectedRail = null; // 選択中のレール
	let LastselectedRail = null;	
	let closestJoitn = null; // 最も近いジョイント
	let showArrowSet = false;
	let isshowAlljoint = false; 
	const CONECT_LIMIT_D = 8.0; //自動接続させる距離

//データの保存とロード
	function save() {
		const selectedData = document.getElementById("dataSelect").value;
		const json = JSON.stringify(rails);
		localStorage.setItem(selectedData, json);
		document.getElementById("output").textContent = "データを保存しました";
	}

	function load() {
		const selectedData = document.getElementById("dataSelect").value;
		const storedJson = localStorage.getItem(selectedData);console.log(selectedData + " loaded");
		if(storedJson == null){rails = [];
		} else{rails = JSON.parse(storedJson);}
		renewAllJointCoord();
		num_rail = rails.length;
		draw();
		document.getElementById("output").textContent = "データを呼び出しました";
	}
 




	function scaleReset(){
		scale = 1;drawScale=1.0;
		canvasOffsetX = CANVASWIDTH /2;
		canvasOffsetY = CANVASHEIGHT/2;

		ctx.restore();ctx.save();
		ctx.setTransform(1,0,0,1,0,0);
	}

//キャンバスを一回初期化して倍率とオフセットを設定する。
	function canvasSetScale(){
		ctx.restore();ctx.save();
		ctx.setTransform(1,0,0,1,0,0);
		ctx.translate(canvasOffsetX,canvasOffsetY);
		ctx.scale(drawScale, drawScale);	
	}




　

	function initCourse() {
		endX = INIT_X;
		endY = INIT_Y;
		endAngleDeg = 0;
	}

		//レールを追加
	function addRail(type){switch(type){
			case 'S':
					addRectangle(endX, endY,endAngleDeg);break;
			case 'R':case 'L':
					addCurve(endX, endY,endAngleDeg,type);break;
			}
			LastselectedRail=rails[num_rail-1];console.log(LastselectedRail);

	}
		//レール端点を計算
	function CalcRailEnd(x,y,angle,type){
		switch(type){
			case 'S':
					CalcStraightEnd(x,y,angle,1.0);break;
			case 'R':case 'L':
					CalcCurveEnd(x,y,angle,type,1.0);break;		
		}
		
	}

        // 直線を追加
    function addRectangle(x, y,angle) {
		const rail_id = num_rail++;
		const opp_angle = addDeg(angle, 180);
	    const rail = {x,y,angle,type:'S',id:rail_id };
		const joint1 = {x,y,angle:opp_angle,id:rail_id,j_id:0};
	    rails.push(rail);
		joints.push(joint1);
		CalcStraightEnd(x,y,angle,1.0);
		const joint2 = {x:endX,y:endY,angle,id:rail_id,j_id:1};
		joints.push(joint2);
    }
        // 曲線を追加
    function addCurve(x, y,angle,type) {
 		const rail_id = num_rail++;
		const opp_angle = addDeg(angle, 180);
	    const rail = {x,y,angle,type,id:rail_id };
		const joint1 = {x,y,angle:opp_angle,id:rail_id,j_id:0};
	    rails.push(rail);
		joints.push(joint1);
		CalcCurveEnd(x,y,angle,type,1.0);	     
 		const joint2 = {x:endX,y:endY,angle:endAngleDeg,id:rail_id,j_id:1};
		joints.push(joint2);
    }
	//ジョイントを描画
	function drawJoint(x,y,angle,head) {
		var deg_sin = Math.sin(angle * Math.PI / 180.0);
		var deg_cos = Math.cos(angle * Math.PI / 180.0);

		if(head){
			ctx.fillStyle = colorArray[1];
			ctx.beginPath();
			ctx.moveTo(x + JOINT_WIDTH * 0.5 * deg_cos  ,  y + JOINT_WIDTH  * 0.5 * deg_sin );
			ctx.lineTo(x + JOINT_WIDTH * 0.5 * deg_cos +JOINT_LENGTH * deg_sin ,  y + JOINT_WIDTH  * 0.5 * deg_sin - JOINT_LENGTH * deg_cos);
			ctx.lineTo(x - JOINT_WIDTH * 0.5 * deg_cos +JOINT_LENGTH * deg_sin  ,  y - JOINT_WIDTH  * 0.5 * deg_sin - JOINT_LENGTH * deg_cos);
			ctx.lineTo(x - JOINT_WIDTH * 0.5 * deg_cos  ,  y - JOINT_WIDTH  * 0.5 * deg_sin );
			ctx.fill();
		}

		ctx.beginPath();
		ctx.lineWidth = 1;
		ctx.strokeStyle = 'rgb(0, 0, 0)';

		ctx.moveTo(x + BASE_WIDTH  * 0.5 * deg_cos  ,  y + BASE_WIDTH   * 0.5 * deg_sin );
		ctx.lineTo(x + JOINT_WIDTH * 0.5 * deg_cos  ,  y + JOINT_WIDTH  * 0.5 * deg_sin );
		ctx.lineTo(x + JOINT_WIDTH * 0.5 * deg_cos +JOINT_LENGTH * deg_sin ,  y + JOINT_WIDTH  * 0.5 * deg_sin - JOINT_LENGTH * deg_cos);
		ctx.lineTo(x - JOINT_WIDTH * 0.5 * deg_cos +JOINT_LENGTH * deg_sin  ,  y - JOINT_WIDTH  * 0.5 * deg_sin - JOINT_LENGTH * deg_cos);
		ctx.lineTo(x - JOINT_WIDTH * 0.5 * deg_cos  ,  y - JOINT_WIDTH  * 0.5 * deg_sin );
		ctx.lineTo(x - BASE_WIDTH  * 0.5 * deg_cos  ,  y - BASE_WIDTH   * 0.5 * deg_sin );

		ctx.stroke();
		
//		minX = Math.min(minX, endX);
//		maxX = Math.max(maxX, endX);
//		minY = Math.min(minY, endY);
//		maxY = Math.max(maxY, endY);
	}

	function drawRect(x,y,w,h){
	ctx.beginPath();
	ctx.lineWidth = 1;
	ctx.strokeStyle = 'rgb(0, 0, 0)';

	ctx.strokeRect(x,y,w,h);
	ctx.stroke();
	}
	
	
	//直線レール描画
    function drawStraight(x,y,angle,ratio,id) {
		const sinalpha = BASE_LENGTH * ratio * Math.sin(angle * Math.PI/180);
		const cosalpha = BASE_LENGTH * ratio * Math.cos(angle * Math.PI/180);
               	

		for (var i = 0; i < 4; i++) {
                ctx.strokeStyle = colorArray[i];
				ctx.lineWidth = lineWidthArray[i];
				ctx.beginPath();
				ctx.moveTo(x,y);
				ctx.lineTo(x +sinalpha,  y - cosalpha);
				ctx.stroke();
		}
		
		
				drawJoint(x,y,angle);
				drawJoint(x +sinalpha,  y - cosalpha, angle,1);
                ctx.fillStyle = 'white';
                ctx.fillText(id.toString(), x+sinalpha*0.5-5 , y - cosalpha*0.5+3);
	}

	//直線レールの終点を計算
	function CalcStraightEnd(x,y,angle,ratio){
			const sinalpha = BASE_LENGTH * ratio * Math.sin(angle * Math.PI/180);
			const cosalpha = BASE_LENGTH * ratio * Math.cos(angle * Math.PI/180);
			endX = x + sinalpha;
			endY = y - cosalpha;
			endAngleDeg = angle;
	}	

	//曲線レール描画
    function drawCurve(x,y,angle,type,ratio,id) {
		let sinalpha = BASE_LENGTH * ratio * Math.sin(angle * Math.PI/180);
		let cosalpha = BASE_LENGTH * ratio * Math.cos(angle * Math.PI/180);
		
		

		if(type == 'R'){ 
			const startangle = Math.PI+ angle * Math.PI/180;
			const endangle   = Math.PI*0.25 + startangle;	
			const midangle   = Math.PI*0.125+ startangle;
				for (var i = 0; i < 4; i++) {
                ctx.strokeStyle = colorArray[i];
				ctx.lineWidth = lineWidthArray[i];
				ctx.beginPath();
               	ctx.arc(x + cosalpha ,y + sinalpha , BASE_LENGTH, startangle, endangle);
				ctx.stroke();
				}
			const x2 = x + cosalpha + BASE_LENGTH * ratio * Math.cos(endangle);
			const y2 = y + sinalpha + BASE_LENGTH * ratio * Math.sin(endangle);
			drawJoint(x,y,angle);
			drawJoint(x2,y2,angle+45,1);

			const x3 = x + cosalpha + BASE_LENGTH * ratio * Math.cos(midangle);
			const y3 = y + sinalpha + BASE_LENGTH * ratio * Math.sin(midangle);
                ctx.fillStyle = 'white';
                ctx.fillText(id.toString(), x3-5 , y3+3);

			}
		if(type == 'L'){
			const startangle = angle * Math.PI/180;
			const endangle   = startangle - Math.PI*0.25;	
			const midangle   = startangle - Math.PI*0.125;
				for (var i = 0; i < 4; i++) {
                ctx.strokeStyle = colorArray[i];
				ctx.lineWidth = lineWidthArray[i];
				ctx.beginPath();
              	ctx.arc(x - cosalpha ,y - sinalpha , BASE_LENGTH, startangle, endangle,1);
				ctx.stroke();
				}
			const x2 = x - cosalpha + BASE_LENGTH * ratio * Math.cos(endangle);
			const y2 = y - sinalpha + BASE_LENGTH * ratio * Math.sin(endangle);
			drawJoint(x,y,angle);
			drawJoint(x2,y2,angle-45,1);

			const x3 = x - cosalpha + BASE_LENGTH * ratio * Math.cos(midangle);
			const y3 = y - sinalpha + BASE_LENGTH * ratio * Math.sin(midangle);
	            ctx.fillStyle = 'white';
                ctx.fillText(id.toString(), x3-5 , y3+3);
		
			}
                //ctx.fillText(id.toString(), x + 5,y - 40);

		}
//カーブの端点を計算
	function CalcCurveEnd(x,y,angle,type,ratio){
		let sinalpha = BASE_LENGTH * ratio * Math.sin(angle * Math.PI/180);
		let cosalpha = BASE_LENGTH * ratio * Math.cos(angle * Math.PI/180);

		if(type == 'R'){ 
			var startangle = Math.PI+ angle * Math.PI/180;
			var endangle   = Math.PI*0.25+ startangle;	
			endX = x + cosalpha + BASE_LENGTH * ratio * Math.cos(endangle);
			endY = y + sinalpha + BASE_LENGTH * ratio * Math.sin(endangle);
			endAngleDeg = addDeg(angle, 45);
			}
		if(type == 'L'){
				startangle = angle * Math.PI/180;
				endangle   = startangle - Math.PI*0.25;	
			endX = x - cosalpha + BASE_LENGTH * ratio * Math.cos(endangle);
			endY = y - sinalpha + BASE_LENGTH * ratio * Math.sin(endangle);
			endAngleDeg = addDeg(angle, - 45);
			}
		
	}


        // 描画
    function draw() {
		canvasSetScale();
        ctx.clearRect(0 - canvasOffsetX/drawScale, 0 - canvasOffsetY/drawScale, canvas.width/drawScale, canvas.height/drawScale);
			
 

	    rails.forEach(rail => {switch(rail.type){
			case 'S':
				drawStraight(rail.x, rail.y, rail.angle,1,rail.id); break;
			case 'R':
				drawCurve(rail.x, rail.y,rail.angle,'R',1,rail.id); break;
			case 'L':
				drawCurve(rail.x, rail.y,rail.angle,'L',1,rail.id); break;
			default:

			}
	    });
		
	//ジョイント配列の確認
	//showAllJoints();
    drawRect(-166,-333,333,667);
	if(showArrowSet)drawArrowset(endX,endY,endAngleDeg);
    }


  function draw_interval(){
    clearTimeout(setTOdrawID);
    setTOdrawID=setTimeout(draw,15);

  }


//マウスイベントの呼び出し
    // マウスクリック時の処理
    //canvas.addEventListener('mousedown', onDragStart);
	//ドラッグ時
    //canvas.addEventListener('mousemove', onDrag ,  false);
    // マウスクリック時の処理
    canvas.addEventListener('mousedown', onMouseStart);
	//ドラッグ時
    canvas.addEventListener('mousemove', onMouseMove ,  false);
	// マウスアップ時の処理
    canvas.addEventListener('mouseup', onDragEnd,  false);
	//マウスホイール
	canvas.addEventListener("wheel", onWheel,  false );
	// マウスダブルクリック時の処理
    canvas.addEventListener('dblclick', onDblClick ,  false);

//タッチパネル
	canvas.addEventListener('touchstart',  onTouchstart,  false);
	canvas.addEventListener('touchend',	onDragEnd,	false);
	canvas.addEventListener('touchmove',  onTouchMove,  false);

    
	
	// マウスクリック時の処理(未使用）
	function onDragStart(e) {
        const mouseX = (e.clientX - canvasOffsetX  - canvas.getBoundingClientRect().left )/drawScale;
        const mouseY = (e.clientY - canvasOffsetY - canvas.getBoundingClientRect().top)/drawScale;
		console.log( "X="+ e.clientX + "Y="+ e.clientY);

		console.log( "x="+ mouseX + "y="+ mouseY);

	    selectedRail = rails.find(rail =>	isPointOnRail(mouseX, mouseY, rail.x , rail.y,rail.angle, rail.type) );
	
		if(!selectedRail){isDraggingCanvas = true;}

	   // if(IsPointOnArrow(mouseX,mouseY,400,400,0,90,130,8,1));

	//クリックと原点の差を取得 
	　　if(selectedRail){
                dfx = selectedRail.x - mouseX;
                dfy = selectedRail.y - mouseY;
	    }
	}
	
//タッチパネル	スタート
	function onTouchstart(ev) {
		const e = ev.changedTouches[0];
		const rect = canvas.getBoundingClientRect();
		dfx= 0; dfy=0;
		
		if (ev.touches.length <= 1) {
			preMouseX = (e.clientX - canvasOffsetX - rect.left);
			preMouseY = (e.clientY - canvasOffsetY - rect.top );
			onMouseprocess(preMouseX,preMouseY);
    // 指2本の2本の指のＸ座標の差とＹ座標の差を加えた値を記録
		} else if (ev.touches.length >= 2) {
			var p1 = ev.touches[0];
			var p2 = ev.touches[1];
			prePinchDist = Math.sqrt((p1.pageX - p2.pageX)*(p1.pageX - p2.pageX) +(p1.pageY - p2.pageY)*(p1.pageY - p2.pageY));
			preScale = drawScale;
		}

	}

	function onMouseStart(e) {//タッチの挙動をマウスにさせるテスト用
		const rect = canvas.getBoundingClientRect();
			preMouseX = (e.clientX - canvasOffsetX - rect.left);
			preMouseY = (e.clientY - canvasOffsetY - rect.top );
		onMouseprocess(preMouseX,preMouseY);
	
	}

	function onMouseprocess(preMouseX,preMouseY){
	    const mouseX = preMouseX/drawScale;
        const mouseY = preMouseY/drawScale;
			selectedRail = rails.find(rail =>	isPointOnRail(mouseX, mouseY, rail.x , rail.y,rail.angle, rail.type) );
			if(selectedRail){
                dfx = selectedRail.x - mouseX;
                dfy = selectedRail.y - mouseY;
				showArrowSet = true;
			}
			if(!selectedRail){isDraggingCanvas = true;}
			if(showArrowSet)CheckArrowset(mouseX,mouseY,endX,endY,endAngleDeg);
	}



  function onMouseMove(e) {
		var rect = canvas.getBoundingClientRect();
		var x = e.clientX - canvasOffsetX - rect.left;
		var y = e.clientY - canvasOffsetY - rect.top;

      // 指1本の移動距離に応じて画像の左上の座標を算出
 		const newX = x - preMouseX;
		const newY = y - preMouseY;


        if (selectedRail) {
                selectedRail.x += newX/drawScale;
                selectedRail.y += newY/drawScale;
				
				
				preMouseX = x;
				preMouseY = y;

        }
  

		if (isDraggingCanvas) {
        // キャンバス全体を移動
			ctx.translate(newX,newY);
			canvasOffsetX += newX;
			canvasOffsetY += newY;
		}



  		draw();

    }





	
	
	// マウスダブルクリック時の処理
	function onDblClick(e){
        const mouseX = e.clientX - canvasOffsetX - canvas.getBoundingClientRect().left;
        const mouseY = e.clientY - canvasOffsetY - canvas.getBoundingClientRect().top;
		dbcickprocess(mouseX,mouseY);
    }

	function dbcickprocess(mouseX,mouseY){
		console.log("dbclicked");
        rails.forEach((rail,index) =>{//console.log(rail.id);
                if (isPointOnRail(mouseX, mouseY,rail.x,rail.y,rail.angle,rail.type)) {
                    rails.splice(index, 1); // 長方形を配列から取り除く
					joints = joints.filter(joint => joint.id != rail.id);
				}
		});
		showArrowSet = false;
		draw();



	}



    // マウス移動時の処理
	function onDrag(e) {
           if (selectedRail) {
                selectedRail.x += e.movementX/drawScale;
                selectedRail.y += e.movementY/drawScale;
               draw();
            }
  

		if (isDraggingCanvas) {
			const newX = e.movementX;
			const newY = e.movementY;
        // キャンバス全体を移動
			ctx.translate(newX,newY);
			canvasOffsetX += newX;
			canvasOffsetY += newY;
			draw();
	//console.log(newX);
		}

		
    }
	
    // マウスアップ時の処理
	function onDragEnd(){
				if(selectedRail){
					const selectedJoint = joints.find(joint => isPointClose(selectedRail.x,selectedRail.y,selectedRail.id,joint.x,joint.y,joint.id,CONECT_LIMIT_D))

					if(selectedJoint){//console.log(selectedJoint);console.log(selectedRail.id);
						
					    if(	selectedRail.x != selectedJoint.x && selectedRail.y != selectedJoint.y){
							selectedRail.angle = selectedJoint.angle;//draw();
							selectedRail.x = selectedJoint.x;
							selectedRail.y = selectedJoint.y;
						}
					}
						
					CalcRailEnd(selectedRail.x,selectedRail.y,selectedRail.angle,selectedRail.type);
					renewJointCoord(selectedRail.id,selectedRail.x,selectedRail.y,selectedRail.angle);
					//console.log(joints);
					draw();LastselectedRail = selectedRail;
				}
 		
		//選択したフラグの解除
	    selectedRail = null;
		selectedJoint = null;

//alert("ofset="+canvasOffsetX + " pre="+ preMouseX);


	    dfx = 0;
	    dfy = 0;

		isDraggingCanvas = null;

	}
    
//マウスホイール
	function onWheel(e){
   		 const scaleFactor = e.deltaY > 0 ? -0.1 : 0.1;
		 console.log(scaleFactor);
 		 drawScale += scaleFactor;
		 //canvasOffsetX -= scaleFactor * canvasOffsetX;
		 //canvasOffsetY -= scaleFactor * canvasOffsetY*drawScale;
		 
		 //scale += scaleFactor;
    	 //drawScale *= scale;
    // キャンバス全体を拡大縮小
 	//	   ctx.scale(scale,scale);
		draw();
	}



//タッチパネル関連
  function onTouchMove(ev) {
		ev.preventDefault();     // デフォルトイベントをキャンセル
		var e = ev.changedTouches[0];

		var rect = canvas.getBoundingClientRect();
		var x = e.clientX - canvasOffsetX - rect.left;
		var y = e.clientY - canvasOffsetY - rect.top;

		var p1 = ev.touches[0];
      // 指1本の移動距離に応じて画像の左上の座標を算出
      if (ev.touches.length <= 1) {

			const newX = x - preMouseX;
			const newY = y - preMouseY;


        if (selectedRail) {
                selectedRail.x += newX/drawScale;
                selectedRail.y += newY/drawScale;
				
				
				preMouseX = x;
				preMouseY = y;

        }
  

		if (isDraggingCanvas) {
        // キャンバス全体を移動
			ctx.translate(newX,newY);
			canvasOffsetX += newX;
			canvasOffsetY += newY;
		}



  		draw();

      // 指2本の指の間の距離に応じて拡大・縮小率を算出
    } else if(ev.touches.length <= 2) {
			
			const p1 = ev.touches[0];
			const p2 = ev.touches[1];
			const dist = Math.sqrt((p1.pageX - p2.pageX)*(p1.pageX - p2.pageX) + (p1.pageY - p2.pageY)*(p1.pageY - p2.pageY));

			drawScale = preScale * dist/prePinchDist;

 // draw_interval();          //
			draw();

      }

//		e.preventDefault();
	}

	

//レールが移動したときに、ジョイントの座標を更新する関数
	function renewJointCoord(Rail_id,x1,y1,angle1){
		var targetJoint = joints.filter(joint => joint.id == Rail_id);
	//	console.log(targetJoint);
		targetJoint[0].x = x1;
		targetJoint[0].y = y1;
		targetJoint[0].angle = addDeg(angle1,-180);
		
		targetJoint[1].x = endX;
		targetJoint[1].y = endY;
		targetJoint[1].angle = endAngleDeg;
	}

//ジョイントの座標をすべて更新する関数
	function renewAllJointCoord(){
		joints = [];
	    rails.forEach((rail) =>{console.log(rail.id);
		rail.angle = rail.angle % 360;
		let joint2 = [];
		const opp_angle = addDeg(rail.angle, -180);
		const joint1 = {x:rail.x,y:rail.y,angle:opp_angle,id:rail.id,j_id:0};
		joints.push(joint1);
		switch(rail.type){
		case 'S':
// if rail.type S
			CalcStraightEnd(rail.x,rail.y,rail.angle,1.0);
			joint2 = {x:endX,y:endY,angle:rail.angle,id:rail.id,j_id:1};
			break;
		case 'R': case 'L':
// if rail.type RL
			CalcCurveEnd(rail.x,rail.y,rail.angle,rail.type,1.0);	     
			joint2 = {x:endX,y:endY,angle:endAngleDeg,id:rail.id,j_id:1};
		default:	
		}

		joints.push(joint2);

		});
	
	console.log(joints);
	console.log(rails);

	}

//
	function addDeg(a, b){
	return (a + b +360) % 360;
	}

//点の距離がリミット以内かつ同じIDでないかを探す関数
	function isPointClose(x1,y1,id1,x2,y2,id2,dlim){
		const dx = x1 - x2;
		const dy = y1 - y2;
	//console.log("id1="+ id1 + " id2 = "+ id2 );
		if(id1 == id2) return 0;
		return (Math.sqrt(dx**2 + dy**2)<dlim);
	}
		
		

//点がレール上にあるかどうかを判定する関数
	function isPointOnRail(pointX,pointY,x,y,angle,type){
		
		switch(type){
		case 'S':
			return isPointInRectangle(pointX, pointY,x,y,angle,  BASE_LENGTH ); break;
		case 'R':
			return isPointInArc(pointX, pointY, x, y, angle,type, BASE_LENGTH); break;
		case 'L':
			return isPointInArc(pointX, pointY, x, y, angle,type,  BASE_LENGTH); break;
		default:return 0;
		}
	}



	// 点が直線上にあるかどうかを判定する関数
	function isPointInRectangle(pointX, pointY,sx,sy,angle, radius){
	//起点（sx,sy)から長さradiusで引かれた直線上に（pointX,pointY)があるか
//		const radius = radius2 * drawScale;
		const a =   radius * Math.sin( angle * Math.PI/180);
		const b = - radius * Math.cos( angle * Math.PI/180);
		const r2 =  radius * radius ;
		const tt = -(a*  (sx - pointX) + b * (sy - pointY));
		const f1 =   a * (sy - pointY) - b * (sx - pointX);
		const distance2 = BASE_WIDTH * BASE_WIDTH * 0.25  *0.9; 
		return tt>0 && tt< r2 && (f1 * f1)/r2 < distance2;
	}


        // 点が曲線レール上にあるかどうかを判定する関数(R)
    function isPointInArc2(pointX, pointY, arcX, arcY,angle,type, radius) {
	// R:1, L:-1 
			const a = type == 'R'? 1:-1 ;
            const sinalpha = radius * Math.sin(angle * Math.PI/180);
			const cosalpha = radius * Math.cos(angle * Math.PI/180);
            const dx = pointX - arcX - a * cosalpha;
            const dy = pointY - arcY - a * sinalpha;
            const distance = Math.sqrt(dx * dx + dy * dy);
		
            return (distance <= radius +0.5*BASE_WIDTH) && (distance > radius -0.5*BASE_WIDTH);
    }
		
	function isPointInArc(PointX, PointY, arcX, arcY,angle,type, radius) {
			const a = (type == 'R')? 1:-1 ;
			const rtdr = (type == 'R')? 0:1;
            const sinalpha = radius * Math.sin(angle * Math.PI/180);
			const cosalpha = radius * Math.cos(angle * Math.PI/180);
            const x =  arcX + a * cosalpha;
            const y =  arcY + a * sinalpha;
 
			//Rの場合      Lの場合
			//　0 -90 -45　　90 45
			//  45 -45 0    135 90
			//  90 0 45     180 135
			// 180 90 135   -90 -135
			// 270 180 225   0  -45
			const a1 = angle - a * 90;
			const a2 = angle - a * 45;
			return IsPointOnArrow(PointX,PointY,x,y,a1,a2,radius,BASE_WIDTH,rtdr);
		
	}
		

//操作用の矢印をセットで表示させる関数
	function drawArrowset(x,y,angle){
		const r1 = 50;
		const r2 = 40;
		const r3 = 30;
		const s1 = 10;
		const s2 = 15;
		const angle_rad = angle * Math.PI/180;

		const xa = x - Math.sin(angle_rad) * s1;
		const ya = y + Math.cos(angle_rad) * s1;
		const xb = x + r1 * Math.cos( -angle_rad); 
		const yb = y - r1 * Math.sin( -angle_rad);
		const xc = x - r1 * Math.cos( +angle_rad);
		const yc = y - r1 * Math.sin( +angle_rad);

		drawArrow(xa,ya, 60+angle, 120+angle,r3,8,'orange',0);
		drawArrow(xa,ya,-60+angle,-120+angle,r3,8,'orange',1);

		drawArrow(xb,yb,-90+angle,-30+angle,r2,8,'green',0);
		drawArrow(xc,yc, 90+angle, 30+angle,r2,8,'green',1);
		drawStArrow(x,y,angle,50,5,8,'green')

               	//ctx.beginPath();
                //ctx.strokeStyle = 'blue';
				//ctx.lineWidth = 1;
               	//ctx.arc(x  ,y  , r1, 0, Math.PI *2 ,1);
				//ctx.stroke();
	}

//操作用の矢印のタッチをチェックする関数
	function CheckArrowset(PointX,PointY,x,y,angle){
		const r1 = 50;
		const r2 = 40;
		const r3 = 30;
		const s1 = 10;
		const s2 = 15;
		const angle_rad = angle * Math.PI/180;

		const xa = x - Math.sin(angle_rad) * s1;
		const ya = y + Math.cos(angle_rad) * s1;
		const xb = x + r1 * Math.cos( -angle_rad); 
		const yb = y - r1 * Math.sin( -angle_rad);
		const xc = x - r1 * Math.cos( +angle_rad);
		const yc = y - r1 * Math.sin( +angle_rad);

		//drawArrow(xa,ya, 60+angle, 120+angle,r3,8,'orange',0);
		//drawArrow(xa,ya,-60+angle,-120+angle,r3,8,'orange',1);

		//drawArrow(xb,yb,-90+angle,-30+angle,r2,8,'green',0);
		//drawArrow(xc,yc, 90+angle, 30+angle,r2,8,'green',1);
		//drawStArrow(x,y,angle,50,5,8,'green')
		if(IsPointOnArrow(PointX,PointY,xa,ya, 60+angle, 120+angle,r3,8,0)){RotateRail(45);}
		else if(IsPointOnArrow(PointX,PointY,xa,ya,-60+angle,-120+angle,r3,8,1)){RotateRail(-45);}
		else if(IsPointOnArrow(PointX,PointY,xb,yb,-90+angle,-30+angle,r2,20,0)){addRail('R');}
		else if(IsPointOnArrow(PointX,PointY,xc,yc, 90+angle, 30+angle,r2,20,1)){addRail('L');}
		else if(isPointInRectangle(PointX,PointY,x, y,angle, 60)){addRail('S');}
               	//ctx.beginPath();
                //ctx.strokeStyle = 'blue';
				//ctx.lineWidth = 1;
               	//ctx.arc(x  ,y  , r1, 0, Math.PI *2 ,1);
				//ctx.stroke();
	}
//レールの回転
	function RotateRail(degree){
		if(LastselectedRail){
		LastselectedRail.angle = addDeg(LastselectedRail.angle,degree);
		CalcRailEnd(LastselectedRail.x,LastselectedRail.y,LastselectedRail.angle,LastselectedRail.type);
		renewJointCoord(LastselectedRail.id,LastselectedRail.x,LastselectedRail.y,LastselectedRail.angle);
		draw();
		}
	}


//Jointを可視化させる
	function showAllJoints(){console.log("clicked");
	    joints.forEach(joint => {
			if(joint.j_id == 1){
				drawStArrow(joint.x,joint.y,joint.angle,6,0,5,'red',1);
			} 
			else {drawStArrow(joint.x,joint.y,joint.angle,5,0,6,'green',1);
			}
		
	
	//drawArrow(400,400,0,90,0,8,'red',1);
//	drawArrowset(200,400,0);


		});

//console.log('test');

	}


//操作用の直線矢印を描画する関数
	function drawStArrow(x,y,angle,length,distance,width,color){
	
		const sinalpha1 = distance * Math.sin(angle * Math.PI/180);
		const cosalpha1 = distance * Math.cos(angle * Math.PI/180);
 		const sinalpha2 = (distance+length) * Math.sin(angle * Math.PI/180);
		const cosalpha2 = (distance+length) * Math.cos(angle * Math.PI/180);
              	ctx.beginPath();
                ctx.strokeStyle = color;
		ctx.lineWidth = width;
		ctx.moveTo(x +sinalpha1, y - cosalpha1);
		ctx.lineTo(x +sinalpha2, y - cosalpha2);
		ctx.stroke();

   // 矢印を描画
		const arrowLength = width ; // 矢印の長さ
		const arrowAngle = Math.PI / 3; // 矢印の角度（ラジアン）
		const arrowX = x + (arrowLength + distance+length) * Math.sin(angle * Math.PI/180); // 矢印の先端のx座標
		const arrowY = y - (arrowLength + distance+length) * Math.cos(angle * Math.PI/180); // 矢印の先端のy座標
		ctx.beginPath();
		ctx.moveTo(arrowX, arrowY);
		ctx.lineTo(
			x + sinalpha2+ arrowLength * Math.cos(angle * Math.PI/180), 
			y - cosalpha2+ arrowLength * Math.sin(angle * Math.PI/180)
		);
		ctx.lineTo(
			x + sinalpha2 - arrowLength * Math.cos(angle * Math.PI/180),
			y - cosalpha2 - arrowLength * Math.sin(angle * Math.PI/180)
		);
		ctx.closePath();
		ctx.fillStyle = color;
		ctx.fill();


	}


//操作用の矢印を描画する関数
	function drawArrow(x,y,a1,a2,radius,width,color,RotatDir){
		const startangle =  a1 * Math.PI/180 +1.5* Math.PI;
		const endangle   =  a2 * Math.PI/180 +1.5* Math.PI;
		const p = RotatDir == 0 ? 1:-1;	
               	ctx.beginPath();
                ctx.strokeStyle = color;
				ctx.lineWidth = width;
               	ctx.arc(x  ,y  , radius, startangle, endangle,RotatDir);
				ctx.stroke();
   // 矢印を描画
		const arrowLength = width ; // 矢印の長さ
		const arrowAngle = Math.PI / 3; // 矢印の角度（ラジアン）
		const arrowX = x + radius * Math.sin(a2* Math.PI/180)+ p * arrowLength * Math.cos(a2* Math.PI/180); // 矢印の先端のx座標
		const arrowY = y - radius * Math.cos(a2* Math.PI/180)+ p * arrowLength * Math.sin(a2* Math.PI/180); // 矢印の先端のy座標
		ctx.beginPath();
		ctx.moveTo(arrowX, arrowY);
		ctx.lineTo(
			x + (radius + arrowLength) * Math.sin(a2* Math.PI/180),
			y - (radius + arrowLength) * Math.cos(a2* Math.PI/180)
		);
		ctx.lineTo(
			x + (radius - arrowLength) * Math.sin(a2* Math.PI/180),
			y - (radius - arrowLength) * Math.cos(a2* Math.PI/180)
		);
		ctx.closePath();
		ctx.fillStyle = color;
		ctx.fill();
	}


//操作用の矢印上にポイントがあるか確認する関数
	function IsPointOnArrow(PointX,PointY,x,y,a1,a2,radius,width,RotatDir){
		const dx = PointX - x;
		const dy = PointY - y;
		const r2 = dx * dx + dy *dy;
		const angle_P = Math.atan2(dx,-dy);
	//a1,a2は-180～180
		a1 = (a1+180)%360-180;
		a2 = (a2+180)%360-180; 
		const a1_rad = a1* Math.PI /180;
		const a2_rad = a2* Math.PI /180;
		var IsInAngle = 0;
	//矢印は半円以内と仮定
	//時計回りの場合、a1が180未満、a2が180以上のとき断絶
		if(RotatDir == 0){
			if(a2<a1){IsInAngle = (angle_P < a2_rad) || (angle_P> a1_rad);}
			else{ IsInAngle = (angle_P> a1_rad) && (angle_P < a2_rad);}

		}else{
	//反時計回りの場合a1が180以上、a2が180未満のとき断絶
			if(a2>a1){IsInAngle = (angle_P > a2_rad) || (angle_P< a1_rad);}
			else{ IsInAngle = (angle_P< a1_rad) && (angle_P > a2_rad);}

		}
	 //alert(a1 +"-"+ a2 +"-"+ IsInAngle);
		return r2 > (radius - width/2)**2 && r2 < (radius + width/2)**2 && IsInAngle;
	}

		initCourse();
        draw();
		
		
    </script>
</body>
</html>
